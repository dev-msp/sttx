use std::collections::VecDeque;

fn char_offsets(s: &str) -> impl Iterator<Item = (usize, char)> + '_ {
    s.chars().scan(0, |n, c| {
        let old_n = *n;
        *n = old_n + c.len_utf8();
        Some((old_n, c))
    })
}

fn remove_bookending_quotes(line: &str) -> String {
    let offsets = {
        let mut bo = char_offsets(line)
            .filter_map(|(offset, c)| (c == '"').then_some(offset))
            .collect::<VecDeque<_>>();

        bo.pop_front().zip(bo.pop_back())
    };

    let Some((left, right)) = offsets else {
        return line.to_owned();
    };

    let mut new_line = String::new();
    new_line.push_str(&line[..left]);
    new_line.push_str(&line[left + 1..right]);
    new_line.push_str(&line[right + 1..]);

    new_line
}

/// Removes quotes from lines that have exactly two commas.
///
/// Specifically intended to handle poorly-formatted CSV content generated by whisper.cpp.
pub fn handle_quotes<R: std::io::BufRead, W: std::io::Write>(
    reader: R,
    mut writer: W,
) -> Result<(), std::io::Error> {
    for line in reader.lines() {
        let line = line.unwrap();
        let comma_count = line.chars().filter(|&c| c == ',').count();
        let line_to_write = if comma_count == 2 {
            remove_bookending_quotes(&line)
        } else {
            line
        };
        writer.write_all(format!("{line_to_write}\n").as_bytes())?;
    }
    Ok(())
}
